{
  "_args": [
    [
      {
        "raw": "jqvmap@git+https://github.com/shoudaos/jqvmap.git#7828d7cbacfcc91850831aa6fe6f7b8657e7aa17",
        "scope": null,
        "escapedName": "jqvmap",
        "name": "jqvmap",
        "rawSpec": "git+https://github.com/shoudaos/jqvmap.git#7828d7cbacfcc91850831aa6fe6f7b8657e7aa17",
        "spec": "git+https://github.com/shoudaos/jqvmap.git#7828d7cbacfcc91850831aa6fe6f7b8657e7aa17",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:shoudaos/jqvmap.git#7828d7cbacfcc91850831aa6fe6f7b8657e7aa17",
          "sshUrl": "git+ssh://git@github.com/shoudaos/jqvmap.git#7828d7cbacfcc91850831aa6fe6f7b8657e7aa17",
          "httpsUrl": "git+https://github.com/shoudaos/jqvmap.git#7828d7cbacfcc91850831aa6fe6f7b8657e7aa17",
          "gitUrl": "git://github.com/shoudaos/jqvmap.git#7828d7cbacfcc91850831aa6fe6f7b8657e7aa17",
          "shortcut": "github:shoudaos/jqvmap#7828d7cbacfcc91850831aa6fe6f7b8657e7aa17",
          "directUrl": "https://raw.githubusercontent.com/shoudaos/jqvmap/7828d7cbacfcc91850831aa6fe6f7b8657e7aa17/package.json"
        }
      },
      "D:\\Webstorm Projects\\angular2"
    ]
  ],
  "_from": "git+https://github.com/shoudaos/jqvmap.git#7828d7cbacfcc91850831aa6fe6f7b8657e7aa17",
  "_id": "jqvmap@1.5.1",
  "_inCache": true,
  "_location": "/jqvmap",
  "_phantomChildren": {},
  "_requested": {
    "raw": "jqvmap@git+https://github.com/shoudaos/jqvmap.git#7828d7cbacfcc91850831aa6fe6f7b8657e7aa17",
    "scope": null,
    "escapedName": "jqvmap",
    "name": "jqvmap",
    "rawSpec": "git+https://github.com/shoudaos/jqvmap.git#7828d7cbacfcc91850831aa6fe6f7b8657e7aa17",
    "spec": "git+https://github.com/shoudaos/jqvmap.git#7828d7cbacfcc91850831aa6fe6f7b8657e7aa17",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:shoudaos/jqvmap.git#7828d7cbacfcc91850831aa6fe6f7b8657e7aa17",
      "sshUrl": "git+ssh://git@github.com/shoudaos/jqvmap.git#7828d7cbacfcc91850831aa6fe6f7b8657e7aa17",
      "httpsUrl": "git+https://github.com/shoudaos/jqvmap.git#7828d7cbacfcc91850831aa6fe6f7b8657e7aa17",
      "gitUrl": "git://github.com/shoudaos/jqvmap.git#7828d7cbacfcc91850831aa6fe6f7b8657e7aa17",
      "shortcut": "github:shoudaos/jqvmap#7828d7cbacfcc91850831aa6fe6f7b8657e7aa17",
      "directUrl": "https://raw.githubusercontent.com/shoudaos/jqvmap/7828d7cbacfcc91850831aa6fe6f7b8657e7aa17/package.json"
    }
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git+https://github.com/shoudaos/jqvmap.git#7828d7cbacfcc91850831aa6fe6f7b8657e7aa17",
  "_shasum": "1b45907752c00fc6d9a97e6b4db2fe42ab32de63",
  "_shrinkwrap": null,
  "_spec": "jqvmap@git+https://github.com/shoudaos/jqvmap.git#7828d7cbacfcc91850831aa6fe6f7b8657e7aa17",
  "_where": "D:\\Webstorm Projects\\angular2",
  "author": {
    "name": "JQVMap",
    "email": "me@peterschmalfeldt.com",
    "url": "http://jqvmap.com"
  },
  "bugs": {
    "url": "https://github.com/manifestinteractive/jqvmap/issues"
  },
  "dependencies": {},
  "description": "jQuery Vector Map Library",
  "devDependencies": {},
  "gitHead": "7828d7cbacfcc91850831aa6fe6f7b8657e7aa17",
  "homepage": "http://jqvmap.com",
  "keywords": [
    "jquery",
    "map",
    "svg",
    "vml",
    "vector"
  ],
  "license": "(MIT OR GPL-3.0)",
  "main": "dist/jquery.vmap.min.js",
  "name": "jqvmap",
  "optionalDependencies": {},
  "readme": "![JQVMap](http://jqvmap.com/img/logo.png \"JQVMap\")\r\n\r\nThis project is a heavily modified version of [jVectorMap](https://github.com/bjornd/jvectormap) as it was in April of 2012.  I chose to start fresh rather than fork their project as my intentions were to take it in such a different direction that it would become incompatibale with the original source, rendering it near impossible to merge our projects together without extreme complications.\r\n\r\n**Tests:** [![Circle CI](https://circleci.com/gh/manifestinteractive/jqvmap/tree/master.svg?style=svg&circle-token=7bce3b80868ea5ca32009a195c4436db91e5ea67)](https://circleci.com/gh/manifestinteractive/jqvmap/tree/master)\r\n\r\n\r\njQuery Vector Map\r\n======\r\n\r\nTo get started, all you need to do is include the JavaScript and CSS files for the map you want to load ( contained in the `./dist` folder ).\r\n\r\n#### Here is a sample HTML page for loading the World Map with default settings:\r\n\r\n```html\r\n<html>\r\n  <head>\r\n    <title>JQVMap - World Map</title>\r\n    <link href=\"../dist/jqvmap.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\">\r\n\r\n    <script type=\"text/javascript\" src=\"http://code.jquery.com/jquery-1.11.3.min.js\"></script>\r\n    <script type=\"text/javascript\" src=\"../dist/jquery.vmap.js\"></script>\r\n    <script type=\"text/javascript\" src=\"../dist/maps/jquery.vmap.world.js\" charset=\"utf-8\"></script>\r\n\r\n    <script type=\"text/javascript\">\r\n    jQuery(document).ready(function() {\r\n      jQuery('#vmap').vectorMap({ map: 'world_en' });\r\n    });\r\n    </script>\r\n  </head>\r\n  <body>\r\n    <div id=\"vmap\" style=\"width: 600px; height: 400px;\"></div>\r\n  </body>\r\n</html>\r\n```\r\n\r\nMaking it Pretty\r\n======\r\n\r\nWhile initializing a map you can provide parameters to change its look and feel.\r\n\r\n```js\r\njQuery('#vmap').vectorMap(\r\n{\r\n    map: 'world_en',\r\n    backgroundColor: '#a5bfdd',\r\n    borderColor: '#818181',\r\n    borderOpacity: 0.25,\r\n    borderWidth: 1,\r\n    color: '#f4f3f0',\r\n    enableZoom: true,\r\n    hoverColor: '#c9dfaf',\r\n    hoverOpacity: null,\r\n    normalizeFunction: 'linear',\r\n    scaleColors: ['#b6d6ff', '#005ace'],\r\n    selectedColor: '#c9dfaf',\r\n    selectedRegions: null,\r\n    showTooltip: true,\r\n    onRegionClick: function(element, code, region)\r\n    {\r\n        var message = 'You clicked \"'\r\n            + region\r\n            + '\" which has the code: '\r\n            + code.toUpperCase();\r\n\r\n        alert(message);\r\n    }\r\n});\r\n```\r\n\r\nMore Examples\r\n------\r\n\r\nYou can see a variety of examples in the `./examples` folder.\r\n\r\n\r\nConfiguration Settings\r\n------\r\n\r\n**map** *'world_en'*\r\n\r\nMap you want to load. Must include the javascript file with the name of the map you want. Available maps with this library are world_en, usa_en, europe_en and germany_en\r\n\r\n**backgroundColor** *'#a5bfdd'*\r\n\r\nBackground color of map container in any CSS compatible format.\r\n\r\n**borderColor** *'#818181'*\r\n\r\nBorder Color to use to outline map objects\r\n\r\n**borderOpacity** *0.5*\r\n\r\nBorder Opacity to use to outline map objects ( use anything from 0-1, e.g. 0.5, defaults to 0.25 )\r\n\r\n**borderWidth** *3*\r\n\r\nBorder Width to use to outline map objects ( defaults to 1 )\r\n\r\n**color** *'#f4f3f0'*\r\n\r\nColor of map regions.\r\n\r\n**colors**\r\n\r\nColors of individual map regions. Keys of the colors objects are country codes according to ISO 3166-1 alpha-2 standard. Keys of colors must be in lower case.\r\n\r\n**enableZoom** *boolean*\r\n\r\nWhether to Enable Map Zoom ( true or false, defaults to true)\r\n\r\n**hoverColor** *'#c9dfaf'*\r\n\r\nColor of the region when mouse pointer is over it.\r\n\r\n**hoverColors**\r\n\r\nColors of individual map regions when mouse pointer is over it. Keys of the colors objects are country codes according to ISO 3166-1 alpha-2 standard. Keys of colors must be in lower case.\r\n\r\n**hoverOpacity** *0.5*\r\n\r\nOpacity of the region when mouse pointer is over it.\r\n\r\n**normalizeFunction** *'linear'*\r\n\r\nThis function can be used to improve results of visualizations for data with non-linear nature. Function gets raw value as the first parameter and should return value which will be used in calculations of color, with which particular region will be painted.\r\n\r\n**scaleColors** *['#b6d6ff', '#005ace']*\r\n\r\nThis option defines colors, with which regions will be painted when you set option values. Array scaleColors can have more then two elements. Elements should be strings representing colors in RGB hex format.\r\n\r\n**selectedColor** *'#333333'*\r\n\r\nColor for a region when you select it\r\n\r\n**selectedRegions** *['MO', 'FL', 'OR']*\r\n\r\nThis is the Region that you are looking to have preselected (two letter ISO code, defaults to null ). See [REGIONS.md](REGIONS.md)\r\n\r\n**multiSelectRegion** *boolean*\r\n\r\nWhether to enable more than one region to be selected at a time.\r\n\r\n**showLabels** *boolean*\r\n\r\nWhether to show ISO Code Labels ( true or false, defaults to false )\r\n\r\n**showTooltip** *boolean*\r\n\r\nWhether to show Tooltips on Mouseover ( true or false, defaults to true )\r\n\r\n**onLoad** *function(event, map)*\r\n\r\nCallback function which will be called when map is loading, returning the map event and map details.\r\n\r\n**onLabelShow** *function(event, label, code)*\r\n\r\nCallback function which will be called before label is shown. Label DOM object and country code will be passed to the callback as arguments.\r\n\r\n**onRegionOver** *function(event, code, region)*\r\n\r\nCallback function which will be called when the mouse cursor enters the region path. Country code will be passed to the callback as argument.\r\n\r\n**onRegionOut** *function(event, code, region)*\r\n\r\nCallback function which will be called when the mouse cursor leaves the region path. Country code will be passed to the callback as argument.\r\n\r\n**onRegionClick** *function(event, code, region)*\r\n\r\nCallback function which will be called when the user clicks the region path. Country code will be passed to the callback as argument. This callback may be called while the user is moving the map. If you need to distinguish between a \"real\" click and a click resulting from moving the map, you can inspect **$(event.currentTarget).data('mapObject').isMoving**.\r\n\r\n**onRegionSelect** *function(event, code, region)*\r\n\r\nCallback function which will be called when the selects a region. Country code will be passed to the callback as argument.\r\n\r\n**onRegionDeselect** *function(event, code, region)*\r\n\r\nCallback function which will be called when the deselects a region. Country code will be passed to the callback as argument.\r\n\r\n**onResize** *function(event, width, height)*\r\n\r\nCallback function which will be called when the map is resized.  Return event, width & height.\r\n\r\n**pins** *{ \"pk\" : \"pk_pin_metadata\", \"ru\" : \"ru_pin_metadata\",\t... }*\r\n\r\nThis option defines pins, which will be placed on the regions. The JSON can have only one element against one country code. Elements should be strings containing the HTML or id of the pin (depends on the 'pinMode' option explained next).\r\n\r\n**pinMode** *content*\r\n\r\nThis option defines if the \"pins\" JSON contains the HTML strings of the pins or the ids of HTML DOM elements which are to be placed as pins.\r\n\r\nIf the pin mode is \"content\" (or not specified) then the parameter \"pins\" contains the stringified html content to be placed as the pins.\r\n\r\nExample:\r\n\r\n```js\r\njQuery('#vmap').vectorMap({\r\n    map: 'world_en',\r\n    pins: { \"pk\" : \"\\u003cimg src=\\\"pk.png\\\" /\\u003e\" /*serialized <img src=\"pk.png\" />*/, ... },\r\n    pinMode: 'content'\r\n});\r\n```\r\n\r\nIf the pin mode is \"id\" then the parameter \"pins\" contains the value of \"id\" attribute of the html (DOM) elements to be placed as pins.\r\nExample:\r\n\r\n```html\r\n<script>\r\n  jQuery('#vmap').vectorMap({\r\n      map: 'world_en',\r\n      pins: { \"pk\" : \"pin_for_pk\", \"ru\" : \"pin_for_ru\", ... },\r\n      pinMode: 'id'\r\n  });\r\n</script>\r\n<div style=\"display:none\">\r\n  <img id=\"pin_for_pk\" src=\"pk.png\" />\r\n  <div id=\"pin_for_ru\">...</div>\r\n</div>\r\n```\r\n\r\n*Note:*\r\n\r\n1) The pin is placed at the center of the rectangle bounding the country. So depending on the shape of the country, the pin might not land on the country itself. For instance, the pin for 'US' lands in the center of Alaska and rest of the US, which happens to be in the ocean between them.\r\n\r\n2) If the \"pinMode\" is set to \"id\", then the html DOM elements having those ids are NOT COPIED to the desired position, they are TRANSFERRED. This means that the elements will be removed from their original positions and placed on the map.\r\n\r\nDynamic Updating\r\n======\r\n\r\nMost of the options can be changed after initialization using the following code:\r\n\r\n```js\r\njQuery('#vmap').vectorMap('set', 'colors', {us: '#0000ff'});\r\n```\r\n\r\nInstead of colors can be used any parameter except callbacks. Callbacks can be added and deleted using standard jQuery patterns of working with events.\r\nYou can define callback function when you initialize JQVMap:\r\n\r\n```js\r\njQuery('#vmap').vectorMap(\r\n{\r\n    onLoad: function(event, map)\r\n    {\r\n\r\n    },\r\n    onLabelShow: function(event, label, code)\r\n    {\r\n\r\n    },\r\n    onRegionOver: function(event, code, region)\r\n    {\r\n\r\n    },\r\n    onRegionOut: function(event, code, region)\r\n    {\r\n\r\n    },\r\n    onRegionClick: function(event, code, region)\r\n    {\r\n\r\n    },\r\n    onResize: function(event, width, height)\r\n    {\r\n\r\n    }\r\n});\r\n```\r\n\r\nOr later using standard jQuery mechanism:\r\n\r\n```js\r\njQuery('#vmap').bind('load.jqvmap',\r\n    function(event, map)\r\n    {\r\n\r\n    }\r\n);\r\njQuery('#vmap').bind('labelShow.jqvmap',\r\n    function(event, label, code)\r\n    {\r\n\r\n    }\r\n);\r\njQuery('#vmap').bind('regionMouseOver.jqvmap',\r\n    function(event, code, region)\r\n    {\r\n\r\n    }\r\n);\r\njQuery('#vmap').bind('regionMouseOut.jqvmap',\r\n    function(event, code, region)\r\n    {\r\n\r\n    }\r\n);\r\njQuery('#vmap').bind('regionClick.jqvmap',\r\n    function(event, code, region)\r\n    {\r\n\r\n    }\r\n);\r\njQuery('#vmap').bind('resize.jqvmap',\r\n    function(event, width, height)\r\n    {\r\n\r\n    }\r\n);\r\n```\r\n\r\nConsider that fact that you can use standard features of jQuery events like event.preventDefault() or returning false from the callback to prevent default behavior of JQVMap (showing label or changing country color on hover). In the following example, when user moves mouse cursor over Canada label won't be shown and color of country won't be changed. At the same label for Russia will have custom text.\r\n\r\n```js\r\njQuery('#vmap').vectorMap(\r\n{\r\n    onLabelShow: function(event, label, code)\r\n    {\r\n        if (code == 'ca')\r\n        {\r\n            // Hide the label\r\n            event.preventDefault();\r\n        }\r\n        else if (code == 'ru')\r\n        {\r\n            // Plain TEXT labels\r\n            label.text('Bears, vodka, balalaika');\r\n        }\r\n        else if (code == 'us')\r\n        {\r\n            // HTML Based Labels. You can use any HTML you want, this is just an example\r\n            label.html('<div class=\"map-tooltip\"><h1 class=\"header\">Header</h1><p class=\"description\">Some Description</p></div>');\r\n        }\r\n    },\r\n    onRegionOver: function(event, code)\r\n    {\r\n        if (code == 'ca')\r\n        {\r\n            event.preventDefault();\r\n        }\r\n    },\r\n});\r\n```\r\n\r\nData Visualization\r\n======\r\n\r\nHere I want to demonstrate how visualization of some geographical-related data can be done using JQVMap. Let's visualize information about GDP in 2010 for every country. At first we need some data. Let it be site of International Monetary Fond. There we can get information in xsl format, which can be converted first to csv and then to json with any scripting language. Now we have file gdp-data.js with such content (globals are evil, I know, but just for the sake of simplification):\r\n\r\n```js\r\nvar gdpData = {\"af\":16.63,\"al\":11.58,\"dz\":158.97,...};\r\n```\r\n\r\nThen connect it to the page and add some code to make visualization:\r\n\r\n```js\r\nvar max = 0,\r\n    min = Number.MAX_VALUE,\r\n    cc,\r\n    startColor = [200, 238, 255],\r\n    endColor = [0, 100, 145],\r\n    colors = {},\r\n    hex;\r\n\r\n//find maximum and minimum values\r\nfor (cc in gdpData)\r\n{\r\n    if (parseFloat(gdpData[cc]) > max)\r\n    {\r\n        max = parseFloat(gdpData[cc]);\r\n    }\r\n    if (parseFloat(gdpData[cc]) < min)\r\n    {\r\n        min = parseFloat(gdpData[cc]);\r\n    }\r\n}\r\n\r\n//set colors according to values of GDP\r\nfor (cc in gdpData)\r\n{\r\n    if (gdpData[cc] > 0)\r\n    {\r\n        colors[cc] = '#';\r\n        for (var i = 0; i<3; i++)\r\n        {\r\n            hex = Math.round(startColor[i]\r\n                + (endColor[i]\r\n                - startColor[i])\r\n                * (gdpData[cc] / (max - min))).toString(16);\r\n\r\n            if (hex.length == 1)\r\n            {\r\n                hex = '0'+hex;\r\n            }\r\n\r\n            colors[cc] += (hex.length == 1 ? '0' : '') + hex;\r\n        }\r\n    }\r\n}\r\n\r\n//initialize JQVMap\r\njQuery('#vmap').vectorMap(\r\n{\r\n    colors: colors,\r\n    hoverOpacity: 0.7,\r\n    hoverColor: false\r\n});\r\n```\r\n\r\nFunctions\r\n======\r\n\r\nThere are seven functions that can be called on map container:\r\n\r\n**zoomIn()** *Zoom one step in*\r\n\r\nUsage:\r\n\r\n```js\r\njQuery('#vmap').vectorMap('zoomIn');\r\n```\r\n\r\n**zoomOut()** *Zoom one step out*\r\n\r\nUsage:\r\n\r\n```js\r\njQuery('#vmap').vectorMap('zoomOut');\r\n```\r\n\r\n**getPinId(cc)** *Returns the html attribute \"id\" of the pin placed on the country whose country code is provided in \"cc\".*\r\n\r\nUsage:\r\n\r\n```js\r\nvar pinId = jQuery('#vmap').vectorMap('getPinId', 'pk');\r\n```\r\n\r\n**getPin(cc)** *Returns stringified HTML of the pin placed on the country whose country code is provided in \"cc\".*\r\n\r\nUsage:\r\n\r\n```js\r\nvar pinContent = jQuery('#vmap').vectorMap('getPin', 'pk');\r\n```\r\n\r\n**getPins()** *Returns an associative JSON string containing stringified HTML of all the pins.*\r\n\r\nUsage:\r\n\r\n```js\r\nvar pins = jQuery('#vmap').vectorMap('getPins');\r\n```\r\n\r\n**removePin(cc)** *Removes the pin from the country whose country code is specified in \"cc\".*\r\n\r\nUsage:\r\n\r\n```js\r\njQuery('#vmap').vectorMap('removePin', 'pk');\r\n```\r\n\r\n**removePins()** *Removes all the pins from the map.*\r\n\r\nUsage:\r\n\r\n```js\r\njQuery('#vmap').vectorMap('removePins');\r\n```\r\n\r\nEvents\r\n======\r\n\r\nThere are three events which you can use to bind your own callbacks to:\r\n\r\n**drag** *When the map is dragged, this event is triggered.*\r\n\r\n**zoomIn** *When the map is zoomed in, this event is triggered.*\r\n\r\n**zoomOut** *When the map is zoomed out, this event is triggered.*\r\n\r\nYou can bind your routines to any of these events by using jQuery on()\r\nFor example:\r\n\r\n```js\r\n//Do something when the map is dragged\r\njQuery('#vmap').on('drag', function(event)\r\n{\r\n    console.log('The map is being dragged');\r\n    //Do something\r\n});\r\n```\r\n\r\nCustom Maps\r\n======\r\n\r\nSo you want to create your own maps, or change some existing ones.  Awesome.  Make sure to check out [./create/README.md](./create) for details on how to do this.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/manifestinteractive/jqvmap.git"
  },
  "scripts": {
    "test": "grunt test"
  },
  "version": "1.5.1"
}
