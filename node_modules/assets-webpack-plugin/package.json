{
  "_args": [
    [
      {
        "raw": "assets-webpack-plugin@3.4.0",
        "scope": null,
        "escapedName": "assets-webpack-plugin",
        "name": "assets-webpack-plugin",
        "rawSpec": "3.4.0",
        "spec": "3.4.0",
        "type": "version"
      },
      "D:\\Webstorm Projects\\angular2"
    ]
  ],
  "_from": "assets-webpack-plugin@3.4.0",
  "_id": "assets-webpack-plugin@3.4.0",
  "_inCache": true,
  "_location": "/assets-webpack-plugin",
  "_nodeVersion": "5.5.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/assets-webpack-plugin-3.4.0.tgz_1457489703099_0.7067370801232755"
  },
  "_npmUser": {
    "name": "sporto",
    "email": "sebasporto@gmail.com"
  },
  "_npmVersion": "3.3.12",
  "_phantomChildren": {},
  "_requested": {
    "raw": "assets-webpack-plugin@3.4.0",
    "scope": null,
    "escapedName": "assets-webpack-plugin",
    "name": "assets-webpack-plugin",
    "rawSpec": "3.4.0",
    "spec": "3.4.0",
    "type": "version"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/assets-webpack-plugin/-/assets-webpack-plugin-3.4.0.tgz",
  "_shasum": "4e74776e86b864aca490e33ee03b3b1d0f109744",
  "_shrinkwrap": null,
  "_spec": "assets-webpack-plugin@3.4.0",
  "_where": "D:\\Webstorm Projects\\angular2",
  "author": {
    "name": "Sebastian Porto"
  },
  "bugs": {
    "url": "https://github.com/sporto/assets-webpack-plugin/issues"
  },
  "dependencies": {
    "camelcase": "^1.2.1",
    "escape-string-regexp": "^1.0.3",
    "lodash.assign": "^3.2.0",
    "lodash.merge": "^3.3.2",
    "mkdirp": "^0.5.1"
  },
  "description": "Emits a json file with assets paths",
  "devDependencies": {
    "chai": "^3.0.0",
    "css-loader": "^0.9.1",
    "eslint": "^1.6.0",
    "extract-text-webpack-plugin": "^0.3.8",
    "lodash": "^3.9.3",
    "mocha": "^2.2.5",
    "rimraf": "^2.2.8",
    "style-loader": "^0.8.3",
    "webpack": "^1.3.3-beta1"
  },
  "directories": {},
  "dist": {
    "shasum": "4e74776e86b864aca490e33ee03b3b1d0f109744",
    "tarball": "https://registry.npmjs.org/assets-webpack-plugin/-/assets-webpack-plugin-3.4.0.tgz"
  },
  "gitHead": "6fd00374f3576ee1c59b10f05baa07bb90719c90",
  "homepage": "https://github.com/sporto/assets-webpack-plugin",
  "keywords": [
    "webpack",
    "plugin",
    "generate",
    "assets",
    "hashes"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "sporto",
      "email": "sebasporto@gmail.com"
    }
  ],
  "name": "assets-webpack-plugin",
  "optionalDependencies": {},
  "readme": "assets-webpack-plugin\n=====================\n\n[ ![Codeship Status for sporto/assets-webpack-plugin](https://codeship.com/projects/c9171f30-f64d-0132-8e3e-02d99c35d383/status?branch=master)](https://codeship.com/projects/85994)\n\nWebpack plugin that emits a json file with assets paths.\n\n__I'm looking for a new maintainer, please contact me if you are interested.__\n\n## Why is this useful?\n\nWhen working with Webpack you might want to generate your bundles with a generated hash in them (for cache busting).\n\nThis plug-in outputs a json file with the paths of the generated assets so you can find them from somewhere else.\n\n### Example output:\n\nThe output is a JSON object in the form:\n\n```json\n{\n    \"bundle_name\": {\n        \"asset_kind\": \"/public/path/to/asset\"\n    }\n}\n```\n\nWhere:\n\n  * `\"bundle_name\"` is the name of the bundle (the key of the entry object in your webpack config, or \"main\" if your entry is an array).\n  * `\"asset_kind\"` is the camel-cased file extension of the asset\n\nFor example, given the following webpack config:\n\n```js\n{\n    entry: {\n        one: ['src/one.js'],\n        two: ['src/two.js']\n    },\n    output: {\n        path: path.join(__dirname, \"public\", \"js\"),\n        publicPath: \"/js/\",\n        filename: '[name]_[hash].bundle.js'\n    }\n}\n```\n\nThe plugin will output the following json file:\n\n```json\n{\n    \"one\": {\n        \"js\": \"/js/one_2bb80372ebe8047a68d4.bundle.js\"\n    },\n    \"two\": {\n        \"js\": \"/js/two_2bb80372ebe8047a68d4.bundle.js\"\n    }\n}\n```\n\n## Install\n\n```sh\nnpm install assets-webpack-plugin --save-dev\n```\n\n## Configuration\n\nIn your webpack config include the plug-in. And add it to your config:\n\n```js\nvar path = require('path');\nvar AssetsPlugin = require('assets-webpack-plugin');\nvar assetsPluginInstance = new AssetsPlugin();\n\nmodule.exports = {\n    // ...\n    output: {\n        path: path.join(__dirname, \"public\", \"js\"),\n        filename: \"[name]-bundle-[hash].js\",\n        publicPath: \"/js/\"\n    },\n    // ....\n    plugins: [assetsPluginInstance]\n};\n```\n\n### Options\n\nYou can pass the following options:\n\n__filename__: Name for the created json file. Defaults to `webpack-assets.json`\n\n```js\nnew AssetsPlugin({filename: 'assets.json'})\n```\n\n__fullPath__: True by default. If false the output will not include the full path of the generated file.\n\n```js\nnew AssetsPlugin({fullPath: false})\n```\n\ne.g.\n\n`/public/path/bundle.js` vs `bundle.js vs`\n\n__path__: Path where to save the created json file. Defaults to the current directory.\n\n```js\nnew AssetsPlugin({path: path.join(__dirname, 'app', 'views')})\n```\n\n__prettyPrint__: Whether to format the json output for readability. Defaults to false.\n\n```js\nnew AssetsPlugin({prettyPrint: true})\n```\n\n__processOutput__: Formats the assets output. Defaults is JSON stringify function.\n\n```js\nnew AssetsPlugin({\n    processOutput: function (assets) {\n        return 'window.staticMap = ' + JSON.stringify(assets);\n    }\n})\n```\n\n__update__: When set to true, the output json file will be updated instead of overwritten. Defaults to false.\n\n```js\nnew AssetsPlugin({update: true})\n```\n\n__metadata__: Inject metadata into the output file. All values will be injected into the key \"metadata\".\n\n```js\nnew AssetsPlugin({metadata: {version: 123}})\n\n// Manifest will now contain:\n// {\n//   metadata: {version: 123}\n// }\n```\n\n\n### Using in multi-compiler mode\n\nIf you use webpack multi-compiler mode and want your assets written to a single file,\nyou __must__ use the same instance of the plugin in the different configurations.\n\nFor example:\n\n```js\nvar webpack = require('webpack');\nvar AssetsPlugin = require('assets-webpack-plugin');\nvar assetsPluginInstance = new AssetsPlugin();\n\nwebpack([\n    {\n        entry: {one: 'src/one.js'},\n        output: {path: 'build', filename: 'one-bundle.js'},\n        plugins: [assetsPluginInstance]\n    },\n    {\n        entry: {two:'src/two.js'},\n        output: {path: 'build', filename: 'two-bundle.js'},\n        plugins: [assetsPluginInstance]\n    }\n]);\n```\n\n\n### Using this with Rails\n\nYou can use this with Rails to find the bundled Webpack assets via sprockets. In `ApplicationController` you might have:\n\n```ruby\ndef script_for(bundle)\n  path = Rails.root.join('app', 'views', 'webpack-assets.json') # This is the file generated by the plug-in\n  file = File.read(path)\n  json = JSON.parse(file)\n  json[bundle]['js']\nend\n```\n\nThen in the actions:\n\n```ruby\ndef show\n  @script = script_for('clients') # this will retrieve the bundle named 'clients'\nend\n```\n\nAnd finally in the views:\n\n```erb\n<div id=\"app\">\n  <script src=\"<%= @script %>\"></script>\n</div>\n```\n\n## Test\n\n```sh\nnpm test\n```\n\n## Changelog\n\n__3.4.0__ Do not write to assets file if output hasn't changed\n\n__3.2.0__ Added `processOutput` option\n\n__3.1.0__ Config now accepts a `fullPath` option.\n\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sporto/assets-webpack-plugin.git"
  },
  "scripts": {
    "lint": "eslint --fix .",
    "test": "npm run lint && ./node_modules/.bin/mocha test"
  },
  "version": "3.4.0"
}
